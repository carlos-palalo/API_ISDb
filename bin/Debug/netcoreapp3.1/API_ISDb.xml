<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API_ISDb</name>
    </assembly>
    <members>
        <member name="T:API_ISDb.Controllers.AdminController">
            <summary>
            AdminController
            </summary>
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.#ctor(API_ISDb.Interfaces.ISerieService,API_ISDb.Interfaces.IGeneroService,API_ISDb.Interfaces.IRepartoService,API_ISDb.Interfaces.IRepartoRoleService,API_ISDb.Interfaces.IReviewService,API_ISDb.Interfaces.IRoleService,API_ISDb.Interfaces.ISerieGeneroService,API_ISDb.Interfaces.ISerieRepartoService,API_ISDb.Interfaces.IUsuarioService,API_ISDb.Interfaces.IImdbService)">
            <summary>
            Inyección dependencias
            </summary>
            <param name="serie"></param>
            <param name="genero"></param>
            <param name="reparto"></param>
            <param name="repartoRole"></param>
            <param name="review"></param>
            <param name="role"></param>
            <param name="serieGenero"></param>
            <param name="serieReparto"></param>
            <param name="usuario"></param>
            <param name="imdb"></param>
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GenerateBBDD">
            <summary>
            Hace peticiones a la API de IMDb e inserta los datos obtenidos en la BBDD
            </summary>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="500">Internal Server Error</response>
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetSeries">
            <summary>
            Obtiene todas las series de la BBDD
            </summary>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetSerie(System.Int32)">
            <summary>
            Obtención de los datos de una serie en concreto
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Serie Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PostSerie(API_ISDb.Examples.ESerie)">
            <summary>
            Inserción de una serie
            </summary>
            <remarks>
            Sample request:
            
                POST /Serie
                {
                    "Titulo": "string",
                    "Poster": "string",
                    "Year": 0,
                    "Sinopsis": "string",
                    "Trailer": "string"
                }
            </remarks>
            <param name="ser"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PutSerie(API_ISDb.Examples.EUSerie)">
            <summary>
            Actualización de una serie
            </summary>
            <remarks>
            Sample request:
            
                PUT /Serie
                {
                    "IdSerie": 0,
                    "Titulo": "title",
                    "Poster": "url",
                    "Year": 0,
                    "Sinopsis": "string",
                    "Trailer": "url"
                }
            </remarks>
            <param name="ser"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Serie Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.DeleteSerie(System.Int32)">
            <summary>
            Borrado de una serie
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Serie Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetUsuarios">
            <summary>
            Obtención de todos los usuarios
            </summary>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetUsuario(System.Int32)">
            <summary>
            Obtención de la información de un usuario
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Usuario Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PostUsuario(API_ISDb.Examples.EUsuario)">
            <summary>
            Inserción de un usuario
            </summary>
            <remarks>
            Sample request:
            
                POST /Usuario
                {
                    "Username": "name",
                    "Password": "pass",
                    "Email": "email"
                }
            </remarks>
            <param name="user"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Error al crear usuario</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PutUsuario(API_ISDb.Examples.EUUsuario)">
            <summary>
            Actualización de un usuario
            </summary>
            <remarks>
            Sample request:
            
                PUT /Usuario
                {
                    "IdUsuario": 1,
                    "Username": "username",
                    "Password": "password",
                    "Email": "email",
                    "Tipo": "normal/admin"
                }
            </remarks>
            <param name="user"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Usuario Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.DeleteUsuario(System.Int32)">
            <summary>
            Borrado de un usuario
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Usuario Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetReviews">
            <summary>
            Obtención de todas las reviews
            </summary>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetReview(System.Int32)">
            <summary>
            Obtención de los datos de una review en concreto
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Review Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PostReview(API_ISDb.Examples.EReview)">
            <summary>
            Creación de una review
            </summary>
            <remarks>
            Sample request:
            
                POST /Review
                {
                    "Titulo": "title",
                    "Descripcion": "string",
                    "Puntuacion": "0",
                    "UsuarioIdUsuario": "0",
                    "SerieIdSerie": "0"
                }
            </remarks>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Error al crear una review</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PutReview(API_ISDb.Examples.EUReview)">
            <summary>
            Actualización de datos de una review
            </summary>
            <remarks>
            Sample request:
            
                PUT /Review
                {
                    "IdReview": "0",
                    "Titulo": "title",
                    "Descripcion": "string",
                    "Puntuacion": "0",
                    "Fecha": "2020-12-21",
                    "UsuarioIdUsuario": "0",
                    "SerieIdSerie": "0"
                }
            </remarks>
            <param name="rev"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Review Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.DeleteReview(System.Int32)">
            <summary>
            Borrado de una review
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Review Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetGeneros">
            <summary>
            Obtiene todos los géneros
            </summary>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetGenero(System.Int32)">
            <summary>
            Obtiene información de un genero
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Genero Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PostGenero(API_ISDb.Examples.EGenero)">
            <summary>
            Inserción de un género nuevo
            </summary>
            <remarks>
            Sample request:
            
                POST /Genero
                {
                    "Nombre": "name"
                }
            </remarks>
            <param name="gen"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Error al crear Genero</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PutGenero(API_ISDb.Examples.EUGenero)">
            <summary>
            Actualización datos de un género
            </summary>
            <remarks>
            Sample request:
            
                PUT /Genero
                {
                    "IdGenero": 0,
                    "Nombre": "name"
                }
            </remarks>
            <param name="gen"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Genero Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.DeleteGenero(System.Int32)">
            <summary>
            Borrado de un género
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Genero Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetSerieGenero">
            <summary>
            Obtención de todas las filas de SerieGenero
            </summary>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetSerieGenero(System.Int32,System.Int32)">
            <summary>
            Obtención de una fila de SerieGenero
            </summary>
            <param name="serie"></param>
            <param name="genero"></param>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">SerieGenero Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PostSerieGenero(API_ISDb.Examples.ESerieGenero)">
            <summary>
            Inserción de fila en SerieGenero
            </summary>
            <remarks>
            Sample request:
            
                POST /SerieGenero
                {
                    "GeneroIdGenero": 0,
                    "SerieIdSerie": 0
                }
            </remarks>
            <param name="sergen"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Error al crear SerieGenero</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PutSerieGenero(API_ISDb.Examples.ESerieGenero,System.Int32,System.Int32)">
            <summary>
            Actualización de fila de SerieGenero
            </summary>
            <remarks>
            Sample request:
            
                PUT /SerieGenero
                {
                    "GeneroIdGenero": 0,
                    "SerieIdSerie": 0
                }
            </remarks>
            <param name="sergen"></param>
            <param name="serie"></param>
            <param name="genero"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">SerieGenero Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.DeleteSerieGenero(System.Int32,System.Int32)">
            <summary>
            Borrado de SerieGenero
            </summary>
            <param name="serie"></param>
            <param name="genero"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">SerieGenero Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetRepartos(System.Int32)">
            <summary>
            Obtención de todo el reparto de una serie
            </summary>
            <param name="serie"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetRepartosAll">
            <summary>
            Obtención de todas las filas de Reparto. Puede tardar.
            </summary>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetReparto(System.Int32)">
            <summary>
            Obtención de una fila de Reparto en concreto
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Reparto Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PostReparto(API_ISDb.Examples.EReparto)">
            <summary>
            Inserción de una fila en Reparto
            </summary>
            <remarks>
            Sample request:
            
                POST /Reparto
                {
                    "Name": "name",
                    "Foto": "url"
                }
            </remarks>
            <param name="rep"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Error al insertar fila en Reparto</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PutReparto(API_ISDb.Examples.EUReparto)">
            <summary>
            Actualización de datos de Reparto
            </summary>
            <remarks>
            Sample request:
            
                PUT /Reparto
                {
                    "IdReparto": 0,
                    "Name": "name",
                    "Foto": "url"
                }
            </remarks>
            <param name="rep"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Reparto Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.DeleteReparto(System.Int32)">
            <summary>
            Borrado de una fila de Reparto
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Reparto Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetRoles">
            <summary>
            Obtención de todos los roles
            </summary>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetRole(System.Int32)">
            <summary>
            Obtención de un role
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Role Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PostRole(API_ISDb.Examples.ERole)">
            <summary>
            Inserción de Role nuevo
            </summary>
            <remarks>
            Sample request:
            
                POST /Role
                {
                    "Nombre": "name"
                }
            </remarks>
            <param name="rol"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Error al insertar role nuevo</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PutRole(API_ISDb.Examples.EURole)">
            <summary>
            Actualización de datos de role
            </summary>
            <remarks>
            Sample request:
            
                PUT /Role
                {
                    "IdRole": 0,
                    "Nombre": "name"
                }
            </remarks>
            <param name="rol"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Role Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.DeleteRole(System.Int32)">
            <summary>
            Borrado de role
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Role Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetRepartoRoles">
            <summary>
            Obtención de todos los datos de RepartoRole
            </summary>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetRepartoRole(System.Int32,System.Int32)">
            <summary>
            Obtención de una fila de RepartoRole
            </summary>
            <param name="reparto"></param>
            <param name="role"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">RepartoRole Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PostRepartoRole(API_ISDb.Examples.ERepartoRole)">
            <summary>
            Inserción en RepartoRole
            </summary>
            <remarks>
            Sample request:
            
                POST /RepartoRole
                {
                    "RepartoIdReparto": 0,
                    "RoleIdRole": 0
                }
            </remarks>
            <param name="repRole"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Error al insertar en RepartoRole</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PutRepartoRole(API_ISDb.Examples.ERepartoRole,System.Int32,System.Int32)">
            <summary>
            Actualización de datos de RepartoRole
            </summary>
            <remarks>
            Sample request:
            
                PUT /RepartoRole
                {
                    "RepartoIdReparto": 0,
                    "RoleIdRole": 0
                }
            </remarks>
            <param name="repRole"></param>
            <param name="reparto"></param>
            <param name="role"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">RepartoRole Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.DeleteRepartoRole(System.Int32,System.Int32)">
            <summary>
            Borrado de RepartoROle
            </summary>
            <param name="reparto"></param>
            <param name="role"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">RepartoRole Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetSerieRepartos">
            <summary>
            Obtención de todas las filas de SerieReparto
            </summary>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.GetSerieReparto(System.Int32,System.Int32)">
            <summary>
            Obtención de una fila de SerieReparto
            </summary>
            <param name="serie"></param>
            <param name="reparto"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">SerieReparto Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PostSerieReparto(API_ISDb.Examples.ESerieReparto)">
            <summary>
            Inserción en SerieReparto
            </summary>
            <remarks>
            Sample request:
            
                POST /SerieReparto
                {
                    "SerieIdSerie": 0,
                    "RepartoIdReparto": 0
                }
            </remarks>
            <param name="serRep"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">Error al insertar en SerieReparto</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.PutSerieReparto(API_ISDb.Examples.ESerieReparto,System.Int32,System.Int32)">
            <summary>
            Actualización de datos en SerieReparto
            </summary>
            <remarks>
            Sample request:
            
                PUT /SerieReparto
                {
                    "SerieIdSerie": 0,
                    "RepartoIdReparto": 0
                }
            </remarks>
            <param name="serRep"></param>
            <param name="serie"></param>
            <param name="reparto"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">SerieReparto Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="M:API_ISDb.Controllers.AdminController.DeleteSerieReparto(System.Int32,System.Int32)">
            <summary>
            Borrado de SerieReparto
            </summary>
            <param name="serie"></param>
            <param name="reparto"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="403">Forbidden Access</response>
            <response code="404">SerieReparto Not Found</response>
            <response code="500">Internal Server Error</response> 
        </member>
        <member name="T:API_ISDb.Controllers.BaseController">
            <summary>
            Base Controller
            </summary>
        </member>
        <member name="T:API_ISDb.Controllers.GeneralController">
            <summary>
            GeneralController
            </summary>
        </member>
        <member name="M:API_ISDb.Controllers.GeneralController.#ctor(API_ISDb.Interfaces.IUsuarioService,API_ISDb.Interfaces.ISerieService,API_ISDb.Interfaces.IGeneralService,API_ISDb.Interfaces.IReviewService)">
            <summary>
            Inyección dependencias
            </summary>
            <param name="user"></param>
            <param name="serie"></param>
            <param name="general"></param>
            <param name="review"></param>
        </member>
        <member name="M:API_ISDb.Controllers.GeneralController.GetAllSeries">
            <summary>
            Obtención de todas las series
            </summary>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="500">Internal Server Error</response>
        </member>
        <member name="M:API_ISDb.Controllers.GeneralController.GetSerie(System.Int32)">
            <summary>
            Obtención de la información de una serie
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="500">Internal Server Error</response>
        </member>
        <member name="M:API_ISDb.Controllers.GeneralController.SearchSerie">
            <summary>
            Obtención del id y titulo de las series para el SearchBox
            </summary>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="404">Tabla Serie vacía</response>        
            <response code="500">Internal Server Error</response>
        </member>
        <member name="M:API_ISDb.Controllers.GeneralController.GetUsuario(System.Int32)">
            <summary>
            Obtención de la información de un Usuario
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="404">Usuario Not Found</response>
            <response code="500">Internal Server Error</response>
        </member>
        <member name="M:API_ISDb.Controllers.GeneralController.UpdatePassword(API_ISDb.Examples.EUPassword)">
            <summary>
            Actualización de password del usuario
            </summary>
            <param name="user"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="404">Usuario Not Found</response>
            <response code="500">Internal Server Error</response>
        </member>
        <member name="M:API_ISDb.Controllers.GeneralController.UpdateInfUser(API_ISDb.Examples.EUInfo)">
            <summary>
            Actualización de la información del usuario
            </summary>
            <param name="user"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="404">Usuario Not Found</response>
            <response code="500">Internal Server Error</response>
        </member>
        <member name="M:API_ISDb.Controllers.GeneralController.PostReview(API_ISDb.Examples.EReview)">
            <summary>
            Creación de una nueva review
            </summary>
            <param name="rev"></param>
            <returns></returns>
            <response code="200">Success</response>
            <response code="400">Bad Request Error</response>        
            <response code="401">Authorization information is missing or invalid</response>
            <response code="404">Error al crear Review</response>
            <response code="500">Internal Server Error</response>
        </member>
        <member name="T:API_ISDb.Controllers.LoginController">
            <summary>
            LoginController
            </summary>
        </member>
        <member name="M:API_ISDb.Controllers.LoginController.#ctor(API_ISDb.Interfaces.IUsuarioService)">
            <summary>
            Inyección dependencias
            </summary>
            <param name="usuarioService"></param>
        </member>
        <member name="M:API_ISDb.Controllers.LoginController.DoLogin(API_ISDb.Examples.ELogin)">
            <summary>
            Login method
            </summary>
            <remarks>
            Sample request:
            
                POST /Login
                {
                    "username": "your-username",
                    "password": "your-password"
                }
            </remarks>
            <returns></returns>
            <response code="200">Login success</response>
            <response code="400">Exception. Bad Request</response>
            <response code="404">Login failed</response>
            <response code="500">Internal Server Error</response>
        </member>
        <member name="M:API_ISDb.Controllers.LoginController.Register(API_ISDb.Examples.ERegister)">
            <summary>
            Register method
            </summary>
            <remarks>
            Sample request:
            
                POST /Register
                {
                    "Username": "name",
                    "Password": "pass",
                    "Email": "email"
                }
            </remarks>
            <param name="user"></param>
            <returns></returns>
            <response code="200">Register success</response>
            <response code="400">Exception. Bad Request</response>
            <response code="404">Register failed</response>
            <response code="500">Internal Server Error</response>
        </member>
        <member name="P:API_ISDb.Program.MyArchiveHooks">
            <summary>
            Cada x tiempo (especificado en appsettings.json) se comprimen los archivos en Logs y se meten en app.log
            </summary>
        </member>
        <member name="T:API_ISDb.Services.GeneralService">
            <summary>
            GeneralService
            </summary>
        </member>
        <member name="M:API_ISDb.Services.GeneralService.GetAll">
            <summary>
            Obtengo una colección de Series
            </summary>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.GeneralService.GetInfoSerie(System.Int32)">
            <summary>
            Obtengo toda la información disponible de una serie
            </summary>
            <param name="serie"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.GeneralService.SearchSerie">
            <summary>
            Obtengo el id y nombre de todas las series
            </summary>
            <returns></returns>
        </member>
        <member name="T:API_ISDb.Services.GeneroService">
            <summary>
            GeneroService
            </summary>
        </member>
        <member name="M:API_ISDb.Services.GeneroService.GetAll">
            <summary>
            Obtengo colección de Generos
            </summary>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.GeneroService.GetGenero(System.Int32)">
            <summary>
            Obtengo un género en concreto
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.GeneroService.GetGeneros(System.Int32)">
            <summary>
            Obtengo los géneros relacionados con una serie
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.GeneroService.PostGenero(API_ISDb.Genero)">
            <summary>
            Añado un genero comprobando existencia en Db y lo devuelvo
            </summary>
            <param name="genero"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.GeneroService.PutGenero(API_ISDb.Genero)">
            <summary>
            Actualizo los datos de un genero
            </summary>
            <param name="genero"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.GeneroService.DeleteGenero(System.Int32)">
            <summary>
            Elimino un género
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.GeneroService.Search(System.String)">
            <summary>
            Busco un género dada una cadena
            </summary>
            <param name="cad"></param>
            <returns></returns>
        </member>
        <member name="T:API_ISDb.Services.ImdbService">
             <summary>
            Consultar API IMDb e insertar datos obtenidos
             </summary>
        </member>
        <member name="M:API_ISDb.Services.ImdbService.Request(System.String)">
            <summary>
            HTTP Request
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.ImdbService.GenerateBBDD">
            <summary>
            Inserta en las tablas
            </summary>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.ImdbService.WriteBBDD(System.String)">
            <summary>
            Escribe en BBDD los datos obtenidos
            </summary>
            <param name="infoserie"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.ImdbService.WriteItem(System.Collections.Generic.List{API_ISDb.Models.RequestSerie.Item},API_ISDb.Serie,System.String)">
            <summary>
            Inserta directores y escritores
            </summary>
            <param name="items"></param>
            <param name="ser"></param>
            <param name="tipo"></param>
        </member>
        <member name="M:API_ISDb.Services.ImdbService.WriteActor(System.Collections.Generic.List{API_ISDb.Models.RequestSerie.Actor},API_ISDb.Serie,System.String)">
            <summary>
            Inserta los actores
            </summary>
            <param name="items"></param>
            <param name="ser"></param>
            <param name="tipo"></param>
        </member>
        <member name="M:API_ISDb.Services.ImdbService.WriteGenero(System.Collections.Generic.List{API_ISDb.Models.RequestSerie.GenreList},API_ISDb.Serie)">
            <summary>
            Inserta los generos
            </summary>
            <param name="items"></param>
            <param name="ser"></param>
        </member>
        <member name="T:API_ISDb.Services.RepartoRoleService">
            <summary>
            RepartoRoleService
            </summary>
        </member>
        <member name="M:API_ISDb.Services.RepartoRoleService.#ctor(API_ISDb.proyectoContext)">
            <summary>
            Inyección dependencias
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:API_ISDb.Services.RepartoRoleService.GetAll">
            <summary>
            Obtengo la colección de RepartoRole
            </summary>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.RepartoRoleService.GetRepartoRole(System.Int32,System.Int32)">
            <summary>
            Obtengo una fila de RepartoRole
            </summary>
            <param name="reparto"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.RepartoRoleService.PostRepartoRole(API_ISDb.RepartoRole)">
            <summary>
            Añado una fila a RepartoRole si no existe ya
            </summary>
            <param name="repartoRole"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.RepartoRoleService.PutRepartoRole(API_ISDb.RepartoRole,System.Int32,System.Int32)">
            <summary>
            Actualizo los datos de una fila de RepartoRole
            </summary>
            <param name="repartoRole"></param>
            <param name="reparto"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.RepartoRoleService.DeleteRepartoRole(System.Int32,System.Int32)">
            <summary>
            Borro una fila de RepartoRole
            </summary>
            <param name="reparto"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="T:API_ISDb.Services.RepartoService">
            <summary>
            RepartoService
            </summary>
        </member>
        <member name="M:API_ISDb.Services.RepartoService.#ctor(API_ISDb.proyectoContext)">
            <summary>
            Inyección dependencias
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:API_ISDb.Services.RepartoService.GetAll">
            <summary>
            Obtengo colección de Reparto 
            </summary>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.RepartoService.GetReparto(System.Int32)">
            <summary>
            Obtengo una fila de Reparto
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.RepartoService.GetRepartos(System.Int32)">
            <summary>
            Obtengo todos los datos del Reparto de una serie
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.RepartoService.PostReparto(API_ISDb.Reparto)">
            <summary>
            Añado un reparto si no existe ya
            </summary>
            <param name="reparto"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.RepartoService.PutReparto(API_ISDb.Reparto)">
            <summary>
            Actualizo los datos de un reparto
            </summary>
            <param name="reparto"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.RepartoService.DeleteReparto(System.Int32)">
            <summary>
            Borro un reparto
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.RepartoService.Search(System.String)">
            <summary>
            Busco un reparto que coincida con la cad
            </summary>
            <param name="cad"></param>
            <returns></returns>
        </member>
        <member name="T:API_ISDb.Services.ReviewService">
            <summary>
            ReviewService
            </summary>
        </member>
        <member name="M:API_ISDb.Services.ReviewService.#ctor(API_ISDb.proyectoContext)">
            <summary>
            Inyección dependencias
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:API_ISDb.Services.ReviewService.GetAll">
            <summary>
            Obtengo colección de Reviews
            </summary>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.ReviewService.GetReview(System.Int32)">
            <summary>
            Obtengo una review
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.ReviewService.GetListaReviews(System.Int32)">
            <summary>
            Obtengo una lista de reviews de una serie
            </summary>
            <param name="serie"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.ReviewService.PostReview(API_ISDb.Review)">
            <summary>
            Añado una review
            </summary>
            <param name="review"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.ReviewService.PutReview(API_ISDb.Review)">
            <summary>
            Actualizo una review
            </summary>
            <param name="review"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.ReviewService.DeleteReview(System.Int32)">
            <summary>
            Borro una review
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:API_ISDb.Services.RoleService">
            <summary>
            RoleService
            </summary>
        </member>
        <member name="M:API_ISDb.Services.RoleService.#ctor(API_ISDb.proyectoContext)">
            <summary>
            Inyección dependencias
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:API_ISDb.Services.RoleService.GetAll">
            <summary>
            Obtengo colección de Role
            </summary>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.RoleService.GetRole(System.Int32)">
            <summary>
            Obtengo una fila de Role
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.RoleService.PostRole(API_ISDb.Role)">
            <summary>
            Añado una fila a Role
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.RoleService.PutRole(API_ISDb.Role)">
            <summary>
            Actualizo una fila de Role
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.RoleService.DeleteRole(System.Int32)">
            <summary>
            Borro una fila de Role
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.RoleService.Search(System.String)">
            <summary>
            Busco un Role que corresponda con la cad
            </summary>
            <param name="cad"></param>
            <returns></returns>
        </member>
        <member name="T:API_ISDb.Services.SerieGeneroService">
            <summary>
            SerieGeneroService
            </summary>
        </member>
        <member name="M:API_ISDb.Services.SerieGeneroService.#ctor(API_ISDb.proyectoContext)">
            <summary>
            Inyección dependencias
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:API_ISDb.Services.SerieGeneroService.GetAll">
            <summary>
            Obtengo colección de SerieGenero
            </summary>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.SerieGeneroService.GetSerieGenero(System.Int32,System.Int32)">
            <summary>
            Obtengo una fila de SerieGenero
            </summary>
            <param name="serie"></param>
            <param name="genero"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.SerieGeneroService.PostSerieGenero(API_ISDb.SerieGenero)">
            <summary>
            Añado una fila a SerieGenero
            </summary>
            <param name="serieGenero"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.SerieGeneroService.PutSerieGenero(API_ISDb.SerieGenero,System.Int32,System.Int32)">
            <summary>
            Actualizo una fila de SerieGenero
            </summary>
            <param name="serieGenero"></param>
            <param name="serie"></param>
            <param name="genero"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.SerieGeneroService.DeleteSerieGenero(System.Int32,System.Int32)">
            <summary>
            Borro una fila de SerieGenero
            </summary>
            <param name="serie"></param>
            <param name="genero"></param>
            <returns></returns>
        </member>
        <member name="T:API_ISDb.Services.SerieRepartoService">
            <summary>
            SerieRepartoService
            </summary>
        </member>
        <member name="M:API_ISDb.Services.SerieRepartoService.#ctor(API_ISDb.proyectoContext)">
            <summary>
            Inyección dependencias
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:API_ISDb.Services.SerieRepartoService.GetAll">
            <summary>
            Obtengo colección de SerieReparto
            </summary>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.SerieRepartoService.GetSerieReparto(System.Int32,System.Int32)">
            <summary>
            Obtengo una fila de SerieReparto
            </summary>
            <param name="serie"></param>
            <param name="reparto"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.SerieRepartoService.PostSerieReparto(API_ISDb.SerieReparto)">
            <summary>
            Añado una fila a SerieReparto
            </summary>
            <param name="serieReparto"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.SerieRepartoService.PutSerieReparto(API_ISDb.SerieReparto,System.Int32,System.Int32)">
            <summary>
            Actualizo fila de SerieReparto
            </summary>
            <param name="serieReparto"></param>
            <param name="serie"></param>
            <param name="reparto"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.SerieRepartoService.DeleteSerieReparto(System.Int32,System.Int32)">
            <summary>
            Borro fila de SerieReparto
            </summary>
            <param name="serie"></param>
            <param name="reparto"></param>
            <returns></returns>
        </member>
        <member name="T:API_ISDb.Services.SerieService">
            <summary>
            SerieService
            </summary>
        </member>
        <member name="M:API_ISDb.Services.SerieService.#ctor(API_ISDb.proyectoContext)">
            <summary>
            Inyección dependencias
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:API_ISDb.Services.SerieService.GetAll">
            <summary>
            Obtengo colección de series
            </summary>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.SerieService.GetSerie(System.Int32)">
            <summary>
            Obtengo una serie
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.SerieService.SearchSerie">
            <summary>
            Obtengo una lista con el id y el nombre de las series
            </summary>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.SerieService.Search(System.String)">
            <summary>
            Obtengo la serie que coincida con cad
            </summary>
            <param name="cad"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.SerieService.PostSerie(API_ISDb.Serie)">
            <summary>
            Añado una serie
            </summary>
            <param name="serie"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.SerieService.PutSerie(API_ISDb.Serie)">
            <summary>
            Actualizo una serie
            </summary>
            <param name="serie"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.SerieService.DeleteSerie(System.Int32)">
            <summary>
            Borro una serie
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:API_ISDb.Services.UsuarioService">
            <summary>
            UsuarioService
            </summary>
        </member>
        <member name="M:API_ISDb.Services.UsuarioService.#ctor(API_ISDb.proyectoContext,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Inyección dependencias
            </summary>
            <param name="context"></param>
            <param name="config"></param>
        </member>
        <member name="M:API_ISDb.Services.UsuarioService.GetAll">
            <summary>
            Obtengo todos los usuarios
            </summary>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.UsuarioService.GetUsuario(System.Int32)">
            <summary>
            Obtengo un usuario
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.UsuarioService.PostUsuario(API_ISDb.Usuario)">
            <summary>
            Añado un usuario
            </summary>
            <param name="usuario"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.UsuarioService.PutUsuario(API_ISDb.Usuario)">
            <summary>
            Actualizo un usuario
            </summary>
            <param name="usuario"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.UsuarioService.DeleteUsuario(System.Int32)">
            <summary>
            Borro un usuario
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.UsuarioService.login(API_ISDb.Usuario)">
            <summary>
            Authenticate and generate token
            </summary>
            <param name="_users"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.UsuarioService.register(API_ISDb.Usuario)">
            <summary>
            Registro de un usuario
            </summary>
            <param name="_users"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.UsuarioService.CheckUser(API_ISDb.Usuario)">
            <summary>
            Compruebo existencial username y el email
            </summary>
            <param name="_users"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.UsuarioService.AuthenticateUser(API_ISDb.Usuario)">
            <summary>
            Autentificación de Usuario
            </summary>
            <param name="login"></param>
            <returns></returns>
        </member>
        <member name="M:API_ISDb.Services.UsuarioService.GenerateJSONWebToken(API_ISDb.Usuario)">
            <summary>
            Generación JWT
            </summary>
            <param name="userInfo"></param>
            <returns></returns>
        </member>
    </members>
</doc>
